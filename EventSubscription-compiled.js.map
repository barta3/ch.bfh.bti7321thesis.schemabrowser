{"version":3,"sources":["EventSubscription.js"],"names":[],"mappings":";;;;;;IAAM,YAAY;AAEd,aAFE,YAAY,GAEA;8BAFZ,YAAY;;AAGV,YAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;KACvG;;;AAAA,iBAJC,YAAY;;kCAOJ,SAAS,EAAE;AACjB,gBAAI,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAI,OAAO,GAAG;AACV,uBAAO,EAAE,CAAC;AACV,yBAAS,EAAE,mBAAU,OAAO,EAAE;AAC1B,2BAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,SAAS,CAAC,CAAC;AACpD,wBAAI,CAAC,OAAO,CAAC,SAAS,CAAC,2CAA2C,GAAG,SAAS,CAAC,CAAC;iBACnF;AACD,yBAAS,EAAE,mBAAU,OAAO,EAAE;AAC1B,2BAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;iBAC7D;aACJ,CAAC;;AAEF,gBAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAU,cAAc,EAAE;AACtD,uBAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;aAClE,CAAC;AACF,gBAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAU,OAAO,EAAE;AAC/C,uBAAO,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;AACpE,AAAC,iBAAC,CAAC,GAAG,GAAG,SAAS,CAAC,CAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aACnD,CAAC;;AAGF,mBAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;AACpE,gBAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAEjC;;;oCAEW,SAAS,EAAE;AACnB,gBAAI,CAAC,OAAO,CAAC,WAAW,CAAC,2CAA2C,GAAG,SAAS,CAAC,CAAC;AAClF,gBAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SAC7B;;;WArCC,YAAY","file":"EventSubscription-compiled.js","sourcesContent":["class Subscription {\n\n    constructor() {\n        this.client2 = new Paho.MQTT.Client(host, port, \"eventSubscr_\" + parseInt(Math.random() * 100, 10));\n    }\n    // TODO: topic specification\n\n    subscribe(eventName) {\n        var self = this;\n        var options = {\n            timeout: 3,\n            onSuccess: function (message) {\n                console.log(\"mqtt subscribe to event \" + eventName);\n                self.client2.subscribe('+/+/+/Temperature IR Bricklet/qC1/events/' + eventName);\n            },\n            onFailure: function (message) {\n                console.log(\"Connection failed: \" + message.errorMessage);\n            }\n        };\n\n        this.client2.onConnectionLost = function (responseObject) {\n            console.log(\"connection lost: \" + responseObject.errorMessage);\n        };\n        this.client2.onMessageArrived = function (message) {\n            console.log(message.destinationName, ' -- ', message.payloadString);\n            ($('#' + eventName)).val(message.payloadString);\n        };\n\n\n        console.log('mqtt connecting to event: ' + this.eventName + ' ...');\n        this.client2.connect(options);\n\n    }\n\n    unsubscribe(eventName) {\n        this.client2.unsubscribe('+/+/+/Temperature IR Bricklet/qC1/events/' + eventName);\n        this.client2.disconnect();\n    }\n}"]}