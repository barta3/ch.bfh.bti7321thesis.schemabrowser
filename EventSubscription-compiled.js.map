{"version":3,"sources":["EventSubscription.js"],"names":[],"mappings":";;;;;;IAAM,YAAY;aAAZ,YAAY;8BAAZ,YAAY;;;iBAAZ,YAAY;;kCAGJ,SAAS,EAAE;AACjB,gBAAI,OAAO,GAAG;AACV,uBAAO,EAAE,CAAC;AACV,yBAAS,EAAE,qBAAY;AACnB,2BAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,SAAS,CAAC;;;AAAC,AAGpD,2BAAO,CAAC,SAAS,CAAC,2CAA2C,GAAG,SAAS,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,CAAC,CAAC;iBACxF;AACD,yBAAS,EAAE,mBAAU,OAAO,EAAE;AAC1B,2BAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;iBAC7D;aACJ,CAAC;;AAEF,gBAAI,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AACnG,mBAAO,CAAC,gBAAgB,GAAG,UAAU,cAAc,EAAE;AACjD,uBAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;aAClE,CAAC;AACF,mBAAO,CAAC,gBAAgB,GAAG,UAAU,OAAO,EAAE;AAC1C,uBAAO,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;AACpE,AAAC,iBAAC,CAAC,GAAG,GAAG,SAAS,CAAC,CAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aACnD,CAAC;;AAGF,aAAC,CAAC,SAAS,CAAC,WAAW,EAAE,YAAY;AACjC,uBAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;AACpE,uBAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aAC5B,CAAC,CAAC;SACN;;;sCAEa;;AAEV,wBAAY,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SACzC;;;WApCC,YAAY","file":"EventSubscription-compiled.js","sourcesContent":["class Subscription {\n\n\n    subscribe(eventName) {\n        var options = {\n            timeout: 3,\n            onSuccess: function () {\n                console.log(\"mqtt subscribe to event \" + eventName);\n\n                // TODO define topic\n                client2.subscribe('+/+/+/Temperature IR Bricklet/qC1/events/' + eventName, {qos: 1});\n            },\n            onFailure: function (message) {\n                console.log(\"Connection failed: \" + message.errorMessage);\n            }\n        };\n\n        var client2 = new Paho.MQTT.Client(host, port, \"eventSubscr_\" + parseInt(Math.random() * 100, 10));\n        client2.onConnectionLost = function (responseObject) {\n            console.log(\"connection lost: \" + responseObject.errorMessage);\n        };\n        client2.onMessageArrived = function (message) {\n            console.log(message.destinationName, ' -- ', message.payloadString);\n            ($('#' + eventName)).val(message.payloadString);\n        };\n\n\n        $.getScript('config.js', function () {\n            console.log('mqtt connecting to event: ' + this.eventName + ' ...');\n            client2.connect(options);\n        });\n    }\n\n    unsubscribe() {\n        // TODO: find a way to access client\n        Subscription.client2.unsubscribe('#');\n    }\n\n\n}"]}