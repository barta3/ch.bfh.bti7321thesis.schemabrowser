{"version":3,"sources":["commandPublishing.js"],"names":[],"mappings":";;;;;;IAAM,SAAS;AACX,aADE,SAAS,GACG;8BADZ,SAAS;KAGV;;iBAHC,SAAS;;gCAKH,KAAK,EAAE,KAAK,EAAE;;AAElB,gBAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;;;AAAC,AAG7F,kBAAM,CAAC,gBAAgB,GAAG,gBAAgB;;;;AAAC,AAI3C,kBAAM,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC;;;AAAC,AAIvC,qBAAS,SAAS,GAAG;;AAEjB,uBAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;AAEzB,oBAAI,MAAM,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;AACjC,oBAAI,SAAS,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AACvC,yBAAS,CAAC,CAAC,CAAC,GAAG,IAAI;;;AAAC,AAGpB,oBAAI,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAAC,AACnD,uBAAO,CAAC,eAAe,GAAG,KAAK,CAAC;AAChC,sBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrB,uBAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpB,sBAAM,CAAC,UAAU,EAAE,CAAC;aACvB;;;AAAA,AAGD,qBAAS,gBAAgB,CAAC,cAAc,EAAE;AACtC,oBAAI,cAAc,CAAC,SAAS,KAAK,CAAC,EAAE;AAChC,2BAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;iBAClE;aACJ;SAGJ;;;WA1CC,SAAS","file":"commandPublishing-compiled.js","sourcesContent":["class Publisher {\n    constructor() {\n\n    }\n\n    publish(value, topic) {\n\n        var client = new Paho.MQTT.Client(host, port, \"cmdPub_\" + parseInt(Math.random() * 100, 10));\n\n        // set callback handlers\n        client.onConnectionLost = onConnectionLost;\n        //client.onMessageArrived = onMessageArrived;\n\n        // connect the client\n        client.connect({onSuccess: onConnect});\n\n\n        // called when the client connects\n        function onConnect() {\n            // Once a connection has been made, make a subscription and send a message.\n            console.log(\"onConnect\");\n\n            var buffer = new ArrayBuffer(16);\n            var int32View = new Int32Array(buffer);\n            int32View[0] = 5200;\n\n            //var message = new Paho.MQTT.Message(buffer);// 170 /  byte\n            var message = new Paho.MQTT.Message(String(value));// 170 / 98byte\n            message.destinationName = topic;\n            client.send(message);\n            console.log(\"sent\");\n            client.disconnect();\n        }\n\n        // called when the client loses its connection\n        function onConnectionLost(responseObject) {\n            if (responseObject.errorCode !== 0) {\n                console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n            }\n        }\n\n\n    }\n}"]}